extend type Query {
  """
  ✨ Look up a single `Application` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  Application(
    """
    The key used to identify the object.
    """
    key: Application_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Application_FirstRow
  ): Application @fdc_generated(from: "Application", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Category` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  Category(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Category_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Category_FirstRow
  ): Category @fdc_generated(from: "Category", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Gig` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  Gig(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Gig_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Gig_FirstRow
  ): Gig @fdc_generated(from: "Gig", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Language` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  Language(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Language_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Language_FirstRow
  ): Language @fdc_generated(from: "Language", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Message` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  Message(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Message_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Message_FirstRow
  ): Message @fdc_generated(from: "Message", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Rating` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  Rating(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Rating_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Rating_FirstRow
  ): Rating @fdc_generated(from: "Rating", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Transaction` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  Transaction(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Transaction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Transaction_FirstRow
  ): Transaction @fdc_generated(from: "Transaction", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Application` objects in the table, optionally filtered by `where` conditions.
  """
  Applications(
    """
    Filter condition to narrow down the query results.
    """
    where: Application_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Application_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Application!]! @fdc_generated(from: "Application", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Category` objects in the table, optionally filtered by `where` conditions.
  """
  Categories(
    """
    Filter condition to narrow down the query results.
    """
    where: Category_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Category_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Category!]! @fdc_generated(from: "Category", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Gig` objects in the table, optionally filtered by `where` conditions.
  """
  Gigs(
    """
    Filter condition to narrow down the query results.
    """
    where: Gig_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Gig_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Gig!]! @fdc_generated(from: "Gig", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Language` objects in the table, optionally filtered by `where` conditions.
  """
  Languages(
    """
    Filter condition to narrow down the query results.
    """
    where: Language_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Language_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Language!]! @fdc_generated(from: "Language", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Message` objects in the table, optionally filtered by `where` conditions.
  """
  Messages(
    """
    Filter condition to narrow down the query results.
    """
    where: Message_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Message_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Message!]! @fdc_generated(from: "Message", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Rating` objects in the table, optionally filtered by `where` conditions.
  """
  Ratings(
    """
    Filter condition to narrow down the query results.
    """
    where: Rating_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Rating_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Rating!]! @fdc_generated(from: "Rating", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Transaction` objects in the table, optionally filtered by `where` conditions.
  """
  Transactions(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Transaction!]! @fdc_generated(from: "Transaction", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table, optionally filtered by `where` conditions.
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
