extend type Mutation {
  """
  ✨ Insert a single `Application` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Application_insert(
    """
    Data object to insert into the table.
    """
    data: Application_Data!
  ): Application_KeyOutput! @fdc_generated(from: "Application", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Category` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Category_insert(
    """
    Data object to insert into the table.
    """
    data: Category_Data!
  ): Category_KeyOutput! @fdc_generated(from: "Category", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Gig` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Gig_insert(
    """
    Data object to insert into the table.
    """
    data: Gig_Data!
  ): Gig_KeyOutput! @fdc_generated(from: "Gig", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Language` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Language_insert(
    """
    Data object to insert into the table.
    """
    data: Language_Data!
  ): Language_KeyOutput! @fdc_generated(from: "Language", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Message` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Message_insert(
    """
    Data object to insert into the table.
    """
    data: Message_Data!
  ): Message_KeyOutput! @fdc_generated(from: "Message", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Rating` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Rating_insert(
    """
    Data object to insert into the table.
    """
    data: Rating_Data!
  ): Rating_KeyOutput! @fdc_generated(from: "Rating", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Transaction` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Transaction_insert(
    """
    Data object to insert into the table.
    """
    data: Transaction_Data!
  ): Transaction_KeyOutput! @fdc_generated(from: "Transaction", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Application` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Application_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Application_Data!]!
  ): [Application_KeyOutput!]! @fdc_generated(from: "Application", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Category` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Category_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Category_Data!]!
  ): [Category_KeyOutput!]! @fdc_generated(from: "Category", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Gig` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Gig_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Gig_Data!]!
  ): [Gig_KeyOutput!]! @fdc_generated(from: "Gig", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Language` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Language_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Language_Data!]!
  ): [Language_KeyOutput!]! @fdc_generated(from: "Language", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Message` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Message_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Message_Data!]!
  ): [Message_KeyOutput!]! @fdc_generated(from: "Message", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Rating` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Rating_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Rating_Data!]!
  ): [Rating_KeyOutput!]! @fdc_generated(from: "Rating", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Transaction` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  Transaction_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Transaction_Data!]!
  ): [Transaction_KeyOutput!]! @fdc_generated(from: "Transaction", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Application` into the table, based on the primary key. Returns the key of the newly inserted `Application`.
  """
  Application_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Application_Data!
  ): Application_KeyOutput! @fdc_generated(from: "Application", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Category` into the table, based on the primary key. Returns the key of the newly inserted `Category`.
  """
  Category_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Category_Data!
  ): Category_KeyOutput! @fdc_generated(from: "Category", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Gig` into the table, based on the primary key. Returns the key of the newly inserted `Gig`.
  """
  Gig_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Gig_Data!
  ): Gig_KeyOutput! @fdc_generated(from: "Gig", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Language` into the table, based on the primary key. Returns the key of the newly inserted `Language`.
  """
  Language_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Language_Data!
  ): Language_KeyOutput! @fdc_generated(from: "Language", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Message` into the table, based on the primary key. Returns the key of the newly inserted `Message`.
  """
  Message_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Message_Data!
  ): Message_KeyOutput! @fdc_generated(from: "Message", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Rating` into the table, based on the primary key. Returns the key of the newly inserted `Rating`.
  """
  Rating_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Rating_Data!
  ): Rating_KeyOutput! @fdc_generated(from: "Rating", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Transaction` into the table, based on the primary key. Returns the key of the newly inserted `Transaction`.
  """
  Transaction_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Transaction_Data!
  ): Transaction_KeyOutput! @fdc_generated(from: "Transaction", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Application` objects into the table, based on the primary key. Returns the key of the newly inserted `Application`.
  """
  Application_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Application_Data!]!
  ): [Application_KeyOutput!]! @fdc_generated(from: "Application", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Category` objects into the table, based on the primary key. Returns the key of the newly inserted `Category`.
  """
  Category_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Category_Data!]!
  ): [Category_KeyOutput!]! @fdc_generated(from: "Category", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Gig` objects into the table, based on the primary key. Returns the key of the newly inserted `Gig`.
  """
  Gig_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Gig_Data!]!
  ): [Gig_KeyOutput!]! @fdc_generated(from: "Gig", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Language` objects into the table, based on the primary key. Returns the key of the newly inserted `Language`.
  """
  Language_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Language_Data!]!
  ): [Language_KeyOutput!]! @fdc_generated(from: "Language", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Message` objects into the table, based on the primary key. Returns the key of the newly inserted `Message`.
  """
  Message_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Message_Data!]!
  ): [Message_KeyOutput!]! @fdc_generated(from: "Message", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Rating` objects into the table, based on the primary key. Returns the key of the newly inserted `Rating`.
  """
  Rating_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Rating_Data!]!
  ): [Rating_KeyOutput!]! @fdc_generated(from: "Rating", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Transaction` objects into the table, based on the primary key. Returns the key of the newly inserted `Transaction`.
  """
  Transaction_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Transaction_Data!]!
  ): [Transaction_KeyOutput!]! @fdc_generated(from: "Transaction", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Application` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  Application_update(
    """
    The key used to identify the object.
    """
    key: Application_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Application_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Application_Data!
  ): Application_KeyOutput @fdc_generated(from: "Application", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Category` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  Category_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Category_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Category_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Category_Data!
  ): Category_KeyOutput @fdc_generated(from: "Category", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Gig` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  Gig_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Gig_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Gig_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Gig_Data!
  ): Gig_KeyOutput @fdc_generated(from: "Gig", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Language` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  Language_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Language_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Language_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Language_Data!
  ): Language_KeyOutput @fdc_generated(from: "Language", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Message` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  Message_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Message_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Message_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Message_Data!
  ): Message_KeyOutput @fdc_generated(from: "Message", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Rating` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  Rating_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Rating_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Rating_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Rating_Data!
  ): Rating_KeyOutput @fdc_generated(from: "Rating", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Transaction` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  Transaction_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Transaction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Transaction_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Transaction_Data!
  ): Transaction_KeyOutput @fdc_generated(from: "Transaction", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Application` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  Application_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Application_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Application_Data!
  ): Int! @fdc_generated(from: "Application", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Category` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  Category_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Category_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Category_Data!
  ): Int! @fdc_generated(from: "Category", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Gig` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  Gig_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Gig_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Gig_Data!
  ): Int! @fdc_generated(from: "Gig", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Language` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  Language_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Language_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Language_Data!
  ): Int! @fdc_generated(from: "Language", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Message` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  Message_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Message_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Message_Data!
  ): Int! @fdc_generated(from: "Message", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Rating` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  Rating_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Rating_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Rating_Data!
  ): Int! @fdc_generated(from: "Rating", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Transaction` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  Transaction_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Transaction_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Transaction_Data!
  ): Int! @fdc_generated(from: "Transaction", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Application` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  Application_delete(
    """
    The key used to identify the object.
    """
    key: Application_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Application_FirstRow
  ): Application_KeyOutput @fdc_generated(from: "Application", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Category` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  Category_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Category_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Category_FirstRow
  ): Category_KeyOutput @fdc_generated(from: "Category", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Gig` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  Gig_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Gig_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Gig_FirstRow
  ): Gig_KeyOutput @fdc_generated(from: "Gig", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Language` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  Language_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Language_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Language_FirstRow
  ): Language_KeyOutput @fdc_generated(from: "Language", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Message` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  Message_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Message_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Message_FirstRow
  ): Message_KeyOutput @fdc_generated(from: "Message", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Rating` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  Rating_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Rating_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Rating_FirstRow
  ): Rating_KeyOutput @fdc_generated(from: "Rating", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Transaction` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  Transaction_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Transaction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Transaction_FirstRow
  ): Transaction_KeyOutput @fdc_generated(from: "Transaction", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Application` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  Application_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Application_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Application", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Category` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  Category_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Category_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Category", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Gig` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  Gig_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Gig_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Gig", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Language` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  Language_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Language_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Language", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Message` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  Message_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Message_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Message", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Rating` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  Rating_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Rating_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Rating", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Transaction` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  Transaction_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Transaction_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Transaction", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
