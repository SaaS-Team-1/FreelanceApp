extend type Gig {
  """
  ✨ List `Application` objects in a one-to-many relationship (where `Application`.`gig` is this object).
  """
  Applications_on_gig(
    """
    Filter condition to narrow down the query results.
    """
    where: Application_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Application_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Application!]! @fdc_generated(from: "Application.gig", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Category` objects in a one-to-many relationship (where `Category`.`gig` is this object).
  """
  Categories_on_gig(
    """
    Filter condition to narrow down the query results.
    """
    where: Category_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Category_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Category!]! @fdc_generated(from: "Category.gig", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Rating` objects in a one-to-many relationship (where `Rating`.`gig` is this object).
  """
  Ratings_on_gig(
    """
    Filter condition to narrow down the query results.
    """
    where: Rating_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Rating_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Rating!]! @fdc_generated(from: "Rating.gig", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Transaction` objects in a one-to-many relationship (where `Transaction`.`gig` is this object).
  """
  Transactions_on_gig(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Transaction!]! @fdc_generated(from: "Transaction.gig", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `User` objects using `Application` as the join table (a `Application` object exists where its `gig` is this and its `user` is that).
  """
  users_via_Application(
    """
    Filter condition to narrow down the query results.
    """
    where: Application_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Application_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "Application", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type Rating {
  """
  ✨ List `Gig` objects in a one-to-many relationship (where `Gig`.`rating` is this object).
  """
  Gigs_on_rating(
    """
    Filter condition to narrow down the query results.
    """
    where: Gig_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Gig_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Gig!]! @fdc_generated(from: "Gig.rating", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
}
extend type User {
  """
  ✨ List `Application` objects in a one-to-many relationship (where `Application`.`user` is this object).
  """
  Applications_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Application_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Application_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Application!]! @fdc_generated(from: "Application.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Category` objects in a one-to-many relationship (where `Category`.`user` is this object).
  """
  Categories_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Category_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Category_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Category!]! @fdc_generated(from: "Category.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Gig` objects in a one-to-many relationship (where `Gig`.`user` is this object).
  """
  Gigs_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Gig_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Gig_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Gig!]! @fdc_generated(from: "Gig.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Language` objects in a one-to-many relationship (where `Language`.`user` is this object).
  """
  Languages_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Language_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Language_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Language!]! @fdc_generated(from: "Language.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Message` objects in a one-to-many relationship (where `Message`.`receiver` is this object).
  """
  Messages_on_receiver(
    """
    Filter condition to narrow down the query results.
    """
    where: Message_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Message_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Message!]! @fdc_generated(from: "Message.receiver", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Message` objects in a one-to-many relationship (where `Message`.`sender` is this object).
  """
  Messages_on_sender(
    """
    Filter condition to narrow down the query results.
    """
    where: Message_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Message_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Message!]! @fdc_generated(from: "Message.sender", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Rating` objects in a one-to-many relationship (where `Rating`.`user` is this object).
  """
  Ratings_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Rating_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Rating_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Rating!]! @fdc_generated(from: "Rating.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Transaction` objects in a one-to-many relationship (where `Transaction`.`receiver` is this object).
  """
  Transactions_on_receiver(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Transaction!]! @fdc_generated(from: "Transaction.receiver", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Transaction` objects in a one-to-many relationship (where `Transaction`.`sender` is this object).
  """
  Transactions_on_sender(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Transaction!]! @fdc_generated(from: "Transaction.sender", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Gig` objects using `Application` as the join table (a `Application` object exists where its `user` is this and its `gig` is that).
  """
  Gigs_via_Application(
    """
    Filter condition to narrow down the query results.
    """
    where: Application_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Application_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Gig!]! @fdc_generated(from: "Application", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
