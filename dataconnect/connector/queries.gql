# # Example queries for a simple movie app.

# # @auth() directives control who can call each operation.
# # Anyone should be able to list all movies, so the auth level is set to PUBLIC
# query ListMovies @auth(level: PUBLIC) {
#   movies {
#     id
#     title
#     imageUrl
#     genre
#   }
# }

# List all users, only admins should be able to list all users, so we use NO_ACCESS
query ListUsers @auth(level: NO_ACCESS) {
  users {
    id
    username
    name
    bio
  }
}

query ListLanguages @auth(level: PUBLIC) {
  Languages{
    languageName
    id
    userId
  }
}

query ListGigs @auth(level: PUBLIC) {
  Gigs {
    id
    title
    description
    price
    status
    createdAt
    updatedAt
    user {
      id
      username
    }
    rating: Ratings_on_gig {
      id
      ratingValue
    }
  }
}

query ListUserGigs($userId: UUID_Filter!) {
  Gigs(where: { user: { id: $userId } }) {
    id
    title
    description
    price
    createdAt
    updatedAt
    status
    rating {
      id
      ratingValue
    }
    user {
      id
      username
      name
      bio
    }
  }
}

query ListTransactions @auth(level: PUBLIC) {
  Transactions {
    id
    sender {
      id
      username
    }
    receiver {
      id
      username
    }
    gig {
      id
      title
    }
    transactionDate
    transactionTime
    amount
  }
}

query ListMessages @auth(level: NO_ACCESS) {
  Messages {
    id
    sender {
      id
      username
    }
    receiver {
      id
      username
    }
    textContent
    createdAt
  }
}

query ListCategories @auth(level: PUBLIC) {
  Categories {
    id
    categoryName
    gig {
      id
      title
    }
    user {
      id
      username
    }
  }
}

query ListRatings @auth(level: PUBLIC) {
  Ratings {
    id
    ratingValue
    createdAt
    user {
      id
      username
    }
    gig {
      id
      title
    }
  }
}

query ListApplications @auth(level: PUBLIC) {
  Applications {
    status
    createdAt
    user {
      id
      username
      name
    }
    gig {
      id
      title
    }
  }
}


# # Logged in user can list all their reviews and movie titles associated with the review 
# # Since the query requires the uid of the current authenticated user, the auth level is set to USER
# query ListUserReviews @auth(level: USER) {
#   user(key: {id_expr: "auth.uid"}) {
#     id
#     username
#     # <field>_on_<foreign_key_field> makes it easy to grab info from another table
#     # Here, we use it to grab all the reviews written by the user.
#     reviews: reviews_on_user {
#       id
#       rating
#       reviewDate
#       reviewText
#       movie {
#         id
#         title
#       }
#     }
#   }
# }

# # Get movie by id
# query GetMovieById($id: UUID!) @auth(level: PUBLIC) {
#   movie(id: $id) {
#     id
#     title
#     imageUrl
#     genre
#     metadata: movieMetadata_on_movie {
#       rating
#       releaseYear
#       description
#     }
#     reviews: reviews_on_movie {
#       id
#       reviewText
#       reviewDate
#       rating
#       user {
#         id
#         username
#       }
#     }
#   }
# }

# # Search for movies, actors, and reviews
# query SearchMovie(
#   $titleInput: String
#   $genre: String
# ) @auth(level: PUBLIC) {
#   movies(
#     where: {
#       _and: [
#         { genre: { eq: $genre } }
#         { title: { contains: $titleInput } }
#       ]
#     }
#   ) {
#     id
#     title
#     genre
#     imageUrl
#   }
# }
